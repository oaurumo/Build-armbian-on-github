#==========================================================================
# Description: Build Armbian
# Copyright (C) 2021 https://github.com/oaurumo/
#==========================================================================

name: Build armbian Test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_release:
        description: "Select OS Release."
        required: false
        default: "jammy"
        type: choice
        options:          
          - noble
          - jammy
          - Focal
          - Bionic
          - ---
          - bookworm
          - bullseye
          - Buster
          - Stretch
env:
  TZ: America/New_York
  ROOTFS_SCRIPT: compile-kernel/tools/script/armbian_rootfs.sh

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id == github.event.sender.id }}

    steps:
      # 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 初始化环境
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> $GITHUB_OUTPUT

      # 创建模拟物理磁盘
      - name: Create simulated physical disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      # 下载源代码
      - name: Download source code
        id: down
        working-directory: /builder
        if: ${{ steps.init.outputs.status == 'success' && !cancelled() }}
        run: |
          df -hT ${PWD}
          mkdir -p build          
          ln -sf /builder/build ${GITHUB_WORKSPACE}/build
          echo "status=success" >> $GITHUB_OUTPUT

      # 编译 Armbian
      - name: Compile Armbian [ ${{ inputs.set_release }} ]
        id: compile
        working-directory: /builder
        if: ${{ steps.down.outputs.status == 'success' && !cancelled() }}
        run: |
          # 编译方法及参数说明: https://docs.armbian.com/Developer-Guide_Build-Options
          sudo timedatectl set-timezone Asia/Shanghai
          # sudo update-locale LANG=zh_CN.UTF-8
          sudo timedatectl set-ntp true
          timedatectl
          cd build/
          mkdir -p userpatches
          cd userpatches          
          # wget http://kguba.cn/txt/armbianconfig/lib.config
          # wget http://kguba.cn/txt/armbianconfig/linux-rockchip64-current.config
          # chmod 777 lib.config && chmod 777 linux-rockchip64-current.config
            wget http://kguba.cn/txt/armbianconfig/lib.config
            wget http://kguba.cn/txt/armbianconfig/linux-rockchip64-current.config
            chmod 777 lib.config && chmod 777 linux-rockchip64-current.config
          cd ..
          # cd patch/misc/
          # wget http://kguba.cn/zip/wireless-rtl8723cs2.tar  tar -xf wireless-rtl8723cs2.tar
          # cd ../..          
          mkdir -p output/images         
          cd output/images/ 
           wget http://kguba.cn/txt/armbianconfig/Armbian_community_25.5.0-trunk.444_Aml-s9xx-box_noble_current_6.12.24.img
          sudo xz -9 *.img
          touch Armbian_community_25.5.0-trunk.444_Aml-s9xx-box_noble_current_6.12.24.txt
          # timestamp=$(date +%Y%m%d%H%M%S)
          txt_file=$(find . -maxdepth 1 -type f -name "*.txt" | head -n 1)
          if [ -z "$txt_file" ]; then
          echo "未找到任何打包文件。"
          exit 1
          fi
          tar_name="${txt_file%.txt}"           
          tar -cvf "${tar_name}.tar" *
          TAR_FILE=$(ls -t *.tar | head -n 1)
          echo "已成功打包img文件：${tar_name}.tar"
          rm -f *.img
          rm -f *.xz
          rm -f "$txt_file"
          # ls | tar -cvf armbian_images_$timestamp.tar -T -   
          echo "status=success" >> $GITHUB_OUTPUT
          echo "tar_name=${tar_name}" >> $GITHUB_OUTPUT
          echo "TAR_FILE=${TAR_FILE}" >> $GITHUB_OUTPUT  # 供后续步骤使用
          
      - name: Upload Armbian image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.compile.outputs.status == 'success' && !cancelled() }}
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        with:
          # tag: armbian-img
          artifacts: build/output/images/*.tar
          skipIfReleaseExists: true          
          tag:  ${{ steps.compile.outputs.TAR_FILE }}
          

      # 上传到 GitHub Releases
      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   if: ${{ steps.compile.outputs.status == 'success' && !cancelled() }}
      #   env:
     #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       #  with:
       #    upload_url: ${{ steps.create_release.outputs.upload_url }}
        #   asset_path: ${{ github.workspace }}/build/output/images/*.xz
       #    asset_name: armbian-${{ inputs.set_release }}.img
       #    asset_content_type: application/octet-stream

    # 注意：以下部分需要补充 `create_release` 步骤
    # - name: Create GitHub Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name: ${{ inputs.set_release }}
    #     release_name: Release ${{ inputs.set_release }}
    #     body: "Automated release for Armbian build."
    #     draft: false
    #     prerelease: false
